(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{56:function(e,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.default=void 0;var r,t=n(s(2)),o=function(e){if(e&&e.__esModule)return e;var a={};if(null!=e)for(var s in e)if(Object.prototype.hasOwnProperty.call(e,s)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,s):{};r.get||r.set?Object.defineProperty(a,s,r):a[s]=e[s]}return a.default=e,a}(s(0));n(s(1)),n(s(60));function n(e){return e&&e.__esModule?e:{default:e}}function i(e,a,s,t){r||(r="function"===typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(a||0===n||(a={children:void 0}),a&&o)for(var i in o)void 0===a[i]&&(a[i]=o[i]);else a||(a=o||{});if(1===n)a.children=t;else if(n>1){for(var l=new Array(n),d=0;d<n;d++)l[d]=arguments[d+3];a.children=l}return{$$typeof:r,type:e,key:void 0===s?null:""+s,ref:null,props:a,_owner:null}}function l(e,a,s){return a in e?Object.defineProperty(e,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[a]=s,e}function d(){return(d=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var s=arguments[a];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r])}return e}).apply(this,arguments)}function c(e,a){if(null==e)return{};var s,r,t=function(e,a){if(null==e)return{};var s,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)s=o[r],a.indexOf(s)>=0||(t[s]=e[s]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)s=o[r],a.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(t[s]=e[s])}return t}const p=e=>{let{to:a}=e,s=c(e,["to"]);return a.includes("http")?o.default.createElement("a",d({},e,{href:a})):("#"===a[0]&&(a=t.default.join("/auto-release/","pages/getting-started.html")+a),o.default.createElement("a",d({},s,{href:a,onClick:s=>{if(s.preventDefault(),"#"===e.to)return!1;const r=new URL(t.default.join(window.location.origin,a));window.history.pushState((e=>({href:e.href,pathname:e.pathname,hash:e.hash,query:e.query}))(r),null,a),e.onClick();const o=new CustomEvent("changeLocation",{detail:r});return dispatchEvent(o),!1}})))};p.defaultProps={href:"",onClick:()=>{}};const u=e=>{var a,s;return s=a=class extends o.default.Component{constructor(...e){super(...e),l(this,"state",{Comp:null})}componentDidMount(){!this.state.Comp&&this.props.shouldLoad&&e().then(e=>{this.setState({Comp:e.default})})}render(){const{Comp:e}=this.state;return e?o.default.createElement(e,this.props,this.props.children||null):null}},l(a,"defaultProps",{shouldLoad:!0}),s};u(()=>s.e(21).then(s.bind(null,61))),u(()=>s.e(21).then(s.bind(null,62)));var h=i("h1",{},void 0,"Getting Started"),v=i("p",{},void 0,"Before we do anything we must first install ",i("code",{},void 0,"auto-release-cli")," as a dev dependency."),b=i("pre",{},void 0,i("code",{className:"language-sh"},void 0,"yarn add -D auto-release-cli",i("br",{}))),m=i("p",{},void 0,"The simplest workflow to get set up is adding the following to your ",i("code",{},void 0,"package.json"),". With this setup your application will not be able to use the ",i("code",{},void 0,"no-release")," flag, but everything else will work just fine"),f=i("pre",{},void 0,i("code",{className:"language-json"},void 0,"{",i("br",{}),"  ",i("span",{className:"hljs-attr"},void 0,'"scripts"'),": {",i("br",{}),"    ",i("span",{className:"hljs-attr"},void 0,'"version"'),": ",i("span",{className:"hljs-string"},void 0,"\"npm version `auto version` -m 'Bump version to: %s [skip ci]'\""),",",i("br",{}),"    ",i("span",{className:"hljs-attr"},void 0,'"publish"'),": ",i("span",{className:"hljs-string"},void 0,'"npm publish && git push --follow-tags --set-upstream origin $branch"'),",",i("br",{}),"    ",i("span",{className:"hljs-attr"},void 0,'"release"'),": ",i("span",{className:"hljs-string"},void 0,'"auto changelog && npm run version && npm run publish && auto release"'),i("br",{}),"  }",i("br",{}),"}",i("br",{}))),g=i("code",{},void 0,"no-release"),j=i("p",{},void 0,"To use the ",i("code",{},void 0,"no-release")," label you have to use a little more involved bash script. We could do the if checks in the ",i("code",{},void 0,"package.json")," but this would get messy and hard to read. So instead in your package.json use a shell script defined in the project."),y=i("pre",{},void 0,i("code",{className:"language-json"},void 0,"{",i("br",{}),"  ",i("span",{className:"hljs-attr"},void 0,'"scripts"'),": {",i("br",{}),"    ",i("span",{className:"hljs-attr"},void 0,'"release"'),": ",i("span",{className:"hljs-string"},void 0,'"./scripts/release.sh"'),i("br",{}),"  }",i("br",{}),"}",i("br",{}))),N=i("p",{},void 0,"Here is an example release script for a single NPM package:"),w=i("pre",{},void 0,i("code",{className:"language-sh"},void 0,i("span",{className:"hljs-built_in"},void 0,"export")," PATH=$(npm bin):",i("span",{className:"hljs-variable"},void 0,"$PATH"),i("br",{}),i("br",{}),"VERSION=`auto version`",i("br",{}),i("br",{}),i("span",{className:"hljs-comment"},void 0,"## Support for label 'no-release'"),i("br",{}),i("span",{className:"hljs-keyword"},void 0,"if")," [ ! -z ",i("span",{className:"hljs-string"},void 0,'"',i("span",{className:"hljs-variable"},void 0,"$VERSION"),'"')," ]; ",i("span",{className:"hljs-keyword"},void 0,"then"),i("br",{}),"  ",i("span",{className:"hljs-comment"},void 0,"## Update Changelog"),i("br",{}),"  auto changelog",i("br",{}),i("br",{}),"  ",i("span",{className:"hljs-comment"},void 0,"## Publish Package"),i("br",{}),"  npm version ",i("span",{className:"hljs-variable"},void 0,"$VERSION")," -m ",i("span",{className:"hljs-string"},void 0,'"Bump version to: %s [skip ci]"'),i("br",{}),"  npm publish",i("br",{}),i("br",{}),"  ",i("span",{className:"hljs-comment"},void 0,"## Create GitHub Release"),i("br",{}),"  git push --follow-tags --",i("span",{className:"hljs-built_in"},void 0,"set"),"-upstream origin ",i("span",{className:"hljs-variable"},void 0,"$branch"),i("br",{}),"  auto release",i("br",{}),i("span",{className:"hljs-keyword"},void 0,"fi"),i("br",{}))),k=i("p",{},void 0,"or if you are using lerna to manage a monorepo."),O=i("pre",{},void 0,i("code",{className:"language-sh"},void 0,i("span",{className:"hljs-built_in"},void 0,"export")," PATH=$(npm bin):",i("span",{className:"hljs-variable"},void 0,"$PATH"),i("br",{}),i("br",{}),"VERSION=`auto version`",i("br",{}),i("br",{}),i("span",{className:"hljs-keyword"},void 0,"if")," [ ! -z ",i("span",{className:"hljs-string"},void 0,'"',i("span",{className:"hljs-variable"},void 0,"$VERSION"),'"')," ]; ",i("span",{className:"hljs-keyword"},void 0,"then"),i("br",{}),"  auto changelog",i("br",{}),"  lerna publish --yes --force-publish=* ",i("span",{className:"hljs-variable"},void 0,"$VERSION")," -m ",i("span",{className:"hljs-string"},void 0,"'%v [skip ci]'"),i("br",{}),"  auto release",i("br",{}),i("span",{className:"hljs-keyword"},void 0,"fi"),i("br",{}))),P=i("p",{},void 0,"If you are using enterprise github ",i("code",{},void 0,"auto-release")," lets you configure the github API URL that it uses. You can configure this by using the CLI option ",i("code",{},void 0,"--githubApi")," or by setting the value in your ",i("code",{},void 0,".autorc"),".");var S=e=>i("div",{className:e.className},void 0,i("section",{},void 0,h,v,b,i("h2",{id:"setup"},void 0,"Setup ",i(p,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#setup","aria-hidden":"true"})),m,f,i("h2",{id:"enabling-no-release-label"},void 0,"Enabling ",g," label ",i(p,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#enabling-no-release-label","aria-hidden":"true"})),j,y,N,w,k,O,i("h2",{id:"enterprise"},void 0,"Enterprise ",i(p,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#enterprise","aria-hidden":"true"})),P));a.default=S,e.exports=a.default}}]);
//# sourceMappingURL=getting-started.js.map